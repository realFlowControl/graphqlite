"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5521],{99787:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],s={id:"pagination",title:"Paginating large result sets",sidebar_label:"Pagination",original_id:"pagination"},l=void 0,p={unversionedId:"pagination",id:"version-3.0/pagination",isDocsHomePage:!1,title:"Paginating large result sets",description:"It is quite common to have to paginate over large result sets.",source:"@site/versioned_docs/version-3.0/pagination.mdx",sourceDirName:".",slug:"/pagination",permalink:"/docs/3.0/pagination",editUrl:"https://github.com/thecodingmachine/graphqlite/edit/master/website/versioned_docs/version-3.0/pagination.mdx",tags:[],version:"3.0",lastUpdatedBy:"dependabot[bot]",lastUpdatedAt:1646363239,formattedLastUpdatedAt:"3/4/2022",frontMatter:{id:"pagination",title:"Paginating large result sets",sidebar_label:"Pagination",original_id:"pagination"},sidebar:"version-3.0/docs",previous:{title:"File uploads",permalink:"/docs/3.0/file-uploads"},next:{title:"Custom output types",permalink:"/docs/3.0/custom-output-types"}},u=[{value:"Usage",id:"usage",children:[],level:2}],d={toc:u};function c(t){var e=t.components,n=(0,i.Z)(t,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"It is quite common to have to paginate over large result sets."),(0,o.kt)("p",null,"GraphQLite offers a simple way to do that using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beberlei/porpaginas"},"Porpaginas"),"."),(0,o.kt)("p",null,"Porpaginas is a set of PHP interfaces that can be implemented by result iterators. It comes with a native support for\nPHP arrays, Doctrine and ",(0,o.kt)("a",{parentName:"p",href:"https://thecodingmachine.github.io/tdbm/doc/limit_offset_resultset.html"},"TDBM"),"."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"In your query, simply return a class that implements ",(0,o.kt)("inlineCode",{parentName:"p"},"Porpaginas\\Result"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"class MyController\n{\n    /**\n     * @Query\n     * @return Product[]\n     */\n    public function products(): Porpaginas\\Result\n    {\n        // Some code that returns a list of products\n\n        // If you are using Doctrine, something like:\n        return new Porpaginas\\ORMQueryResult($doctrineQuery);\n    }\n}\n")),(0,o.kt)("p",null,"Notice that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the method return type MUST BE ",(0,o.kt)("inlineCode",{parentName:"li"},"Porpaginas\\Result")," or a class implementing ",(0,o.kt)("inlineCode",{parentName:"li"},"Porpaginas\\Result")),(0,o.kt)("li",{parentName:"ul"},"you MUST add a ",(0,o.kt)("inlineCode",{parentName:"li"},"@return")," statement to help GraphQLite find the type of the list")),(0,o.kt)("p",null,"Once this is done, you can paginate directly from your GraphQL query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"products {\n    items(limit: 10, offset: 20) {\n        id\n        name\n    }\n    count\n}\n")),(0,o.kt)("p",null,'Results are wrapped into an item field. You can use the "limit" and "offset" parameters to apply pagination automatically.'),(0,o.kt)("p",null,'The "count" field returns the ',(0,o.kt)("strong",{parentName:"p"},"total count")," of items."))}c.isMDXComponent=!0}}]);